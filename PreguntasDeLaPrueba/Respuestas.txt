
1.	¿Puedes mostrar un ejemplo de cómo harías una solicitud GET y POST con Axios?

import axios from 'axios';


axios.get('https://jsonplaceholder.typicode.com/users')
  .then(respuesta => {
    console.log(respuesta.data); 
  })
  .catch(error => {
    console.error('Error en la solicitud GET:', error);
  });

// Ejemplo de solicitud POST
axios.post('https://jsonplaceholder.typicode.com/users', { nuevoDato: 'valor' })
  .then(respuesta => {
    console.log(respuesta.data); 
  })
  .catch(error => {
    console.error('Error en la solicitud POST:', error);
  });



2.	¿Puedes dar un ejemplo de cómo has utilizado interceptors para manejar errores globalmente o añadir headers a cada petición?

import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'https://jsonplaceholder.typicode.com', 
});

axiosInstance.interceptors.request.use(
  config => {
    const token = localStorage.getItem('authToken'); 
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

export default axiosInstance;

  3.	¿Puedes explicar el concepto de "closure" en JavaScript con un ejemplo?


function crearSaludo(saludo) {
  return function(nombre) {
    console.log(saludo + ", " + nombre + "!");
  }
}

const saludarHola = crearSaludo("Hola");
const saludarBuenosDias = crearSaludo("Buenos días");

saludarHola("Ana");   // Output: Hola, Ana!
saludarBuenosDias("Juan"); // Output: Buenos días, Juan!

lo que se muestra en consola --> Hola, Ana!
lo que se muestra en consola --> Buenos dias, Juan!



